{
  "swagger": "2.0",
  "info": {
    "description": "Solution of homework for NI-AM1 subject.\n",
    "version": "1.0.0",
    "title": "AM1 - Travel Agency",
    "contact": {
      "email": "chvostom@fit.cvut.cz"
    }
  },
  "host": "t-a.org",
  "basePath": "/",
  "tags": [
    {
      "name": "customer",
      "description": "All services about customers"
    },
    {
      "name": "tour",
      "description": "All services about tours"
    },
    {
      "name": "location",
      "description": "All services about locations"
    },
    {
      "name": "country",
      "description": "All services about countries"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/customer": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get all customers",
        "operationId": "getCustomers",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:customers"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Add a new customer to travel agency database",
        "operationId": "addCustomer",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer object that needs to be added to the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer successfully created"
          },
          "400": {
            "description": "Bad request"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:customers",
              "read:customers"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Update an existing customer",
        "operationId": "updateCustomer",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer object that needs to be updated in the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer successfully updated"
          },
          "201": {
            "description": "Customer created"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:customers",
              "read:customers"
            ]
          }
        ]
      }
    },
    "/customer/{customerId}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find customer by ID",
        "description": "Returns a single customer",
        "operationId": "getCustomerById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:customers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "operationId": "deleteCustomer",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:customers",
              "read:customers"
            ]
          }
        ]
      }
    },
    "/tour": {
      "get": {
        "tags": [
          "tour"
        ],
        "summary": "Get all tours",
        "operationId": "getTours",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tour"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:tours"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "tour"
        ],
        "summary": "Add a new tour to travel agency database",
        "operationId": "addTour",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Tour object that needs to be added to the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tour"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tour created"
          },
          "400": {
            "description": "Bad request"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:tours",
              "read:tours"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "tour"
        ],
        "summary": "Update an existing tour",
        "operationId": "updateTour",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Tour object that needs to be updated in the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tour"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tour successfully updated"
          },
          "201": {
            "description": "Tour created"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tour not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:tours",
              "read:tours"
            ]
          }
        ]
      }
    },
    "/tour/{tourId}": {
      "get": {
        "tags": [
          "tour"
        ],
        "summary": "Find tour by ID",
        "description": "Returns a single tour",
        "operationId": "getTourById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "tourId",
            "in": "path",
            "description": "ID of tour to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tour"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tour not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:tours"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "tour"
        ],
        "summary": "Deletes a tour",
        "operationId": "deleteTour",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "tourId",
            "in": "path",
            "description": "Tour id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Tour successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Tour not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:tours",
              "read:tours"
            ]
          }
        ]
      }
    },
    "/tour/findByCustomer": {
      "get": {
        "tags": [
          "tour"
        ],
        "summary": "Finds tours by customer",
        "operationId": "findToursByCustomer",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer value for filtering",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tour"
              }
            }
          },
          "400": {
            "description": "Invalid customer id value"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:tours"
            ]
          }
        ]
      }
    },
    "/tour/findByLocation": {
      "get": {
        "tags": [
          "tour"
        ],
        "summary": "Finds tours by location",
        "operationId": "findToursByLocation",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "description": "Location value for filtering",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tour"
              }
            }
          },
          "400": {
            "description": "Invalid location id value"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:tours"
            ]
          }
        ]
      }
    },
    "/location": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Get all locations",
        "operationId": "getLocations",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:locations"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "location"
        ],
        "summary": "Add a new location to travel agency database",
        "operationId": "addLocation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Location object that needs to be added to the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Location created"
          },
          "400": {
            "description": "Bad request"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:locations",
              "read:locations"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "location"
        ],
        "summary": "Update an existing location",
        "operationId": "updateLocation",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Location object that needs to be updated in the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location successfully updated"
          },
          "201": {
            "description": "Location created"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Location not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:locations",
              "read:locations"
            ]
          }
        ]
      }
    },
    "/location/{locationId}": {
      "get": {
        "tags": [
          "location"
        ],
        "summary": "Find location by ID",
        "description": "Returns a single location",
        "operationId": "getLocationById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "ID of location to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Location not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:locations"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "location"
        ],
        "summary": "Deletes a location",
        "operationId": "deleteLocation",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "Location id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Location successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Location not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:locations",
              "read:locations"
            ]
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get all countries",
        "operationId": "getCountries",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Country"
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:countries"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "country"
        ],
        "summary": "Add a new country to travel agency database",
        "operationId": "addCountry",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Country object that needs to be added to the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Country"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Country created"
          },
          "400": {
            "description": "Bad request"
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:countries",
              "read:countries"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "country"
        ],
        "summary": "Update an existing country",
        "operationId": "updateCountry",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Country object that needs to be updated in the travel agency database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Country"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Country successfully updated"
          },
          "201": {
            "description": "Country created"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Country not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:countries",
              "read:countries"
            ]
          }
        ]
      }
    },
    "/country/{countryId}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Find country by ID",
        "description": "Returns a single country",
        "operationId": "getCountryById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Country"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Country not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "read:countries"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "country"
        ],
        "summary": "Deletes a country",
        "operationId": "deleteCountry",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "Country id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Country successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Country not found"
          }
        },
        "security": [
          {
            "travelagency_auth": [
              "write:countries",
              "read:countries"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "travelagency_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://travelagency.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:customers": "modify customers in your account",
        "read:customers": "read your customers",
        "write:tours": "modify tour in your account",
        "read:tours": "read your tours",
        "write:locations": "modify locations in your account",
        "read:locations": "read your locations",
        "write:countries": "modify countries in your account",
        "read:countries": "read your countries"
      }
    }
  },
  "definitions": {
    "Customer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstname": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Customer"
      }
    },
    "Tour": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "transport": {
          "type": "string",
          "enum": [
            "car",
            "bus",
            "train",
            "plane",
            "boat"
          ]
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "customers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        }
      },
      "xml": {
        "name": "Tour"
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "countryId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Location"
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      },
      "xml": {
        "name": "Country"
      }
    }
  }
}